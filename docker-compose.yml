version: '3.8'

services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: handywriterz
      POSTGRES_USER: handywriterz
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U handywriterz -d handywriterz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - handywriterz

  # Redis for pub/sub and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - handywriterz

  # FastAPI backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://handywriterz:password@postgres:5432/handywriterz
      REDIS_URL: redis://redis:6379
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      R2_BUCKET_NAME: ${R2_BUCKET_NAME}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      DYNAMIC_ENV_ID: ${DYNAMIC_ENV_ID}
      DYNAMIC_PUBLIC_KEY: ${DYNAMIC_PUBLIC_KEY}
      TURNITIN_API_KEY: ${TURNITIN_API_KEY}
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - handywriterz

  # Next.js frontend service
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_BACKEND_URL: http://localhost:8000
      NEXT_PUBLIC_DYNAMIC_ENV_ID: ${NEXT_PUBLIC_DYNAMIC_ENV_ID}
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: ["npm", "run", "dev"]
    networks:
      - handywriterz

  # Background worker for Turnitin processing
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://handywriterz:password@postgres:5432/handywriterz
      REDIS_URL: redis://redis:6379
      TURNITIN_API_KEY: ${TURNITIN_API_KEY}
      TURNITIN_TELEGRAM_BOT_TOKEN: ${TURNITIN_TELEGRAM_BOT_TOKEN}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app
      - worker_data:/app/worker_data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.workers.turnitin_poll"]
    networks:
      - handywriterz

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  worker_data:
    driver: local

networks:
  handywriterz:
    driver: bridge